import {
  Box,
  Card,
  CardBody,
  CardHeader,
  Heading,
  Input,
  useToast,
  Button,
  AutoRenewIcon,
  IconButton
} from '@pancakeswap/uikit'
import Link from 'next/link'
import { ChangeEvent, FormEvent, useState, useMemo, useEffect } from 'react'
import styled from 'styled-components'
import { useTranslation } from '@pancakeswap/localization'
import Container from 'components/Layout/Container'
import { PageMeta } from 'components/Layout/Page'
import useDeployContract from './hook/contractController'

const ABI = `[
  {
      "inputs": [
          {
              "internalType": "string",
              "name": "_name",
              "type": "string"
          },
          {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
          },
          {
              "internalType": "uint256",
              "name": "_supply",
              "type": "uint256"
          }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
  },
  {
      "anonymous": false,
      "inputs": [
          {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
          },
          {
              "indexed": true,
              "internalType": "address",
              "name": "spender",
              "type": "address"
          },
          {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
          }
      ],
      "name": "Approval",
      "type": "event"
  },
  {
      "anonymous": false,
      "inputs": [
          {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
          },
          {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
          },
          {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
          }
      ],
      "name": "Transfer",
      "type": "event"
  },
  {
      "inputs": [
          {
              "internalType": "address",
              "name": "owner",
              "type": "address"
          },
          {
              "internalType": "address",
              "name": "spender",
              "type": "address"
          }
      ],
      "name": "allowance",
      "outputs": [
          {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
          }
      ],
      "stateMutability": "view",
      "type": "function"
  },
  {
      "inputs": [
          {
              "internalType": "address",
              "name": "spender",
              "type": "address"
          },
          {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
          }
      ],
      "name": "approve",
      "outputs": [
          {
              "internalType": "bool",
              "name": "",
              "type": "bool"
          }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
  },
  {
      "inputs": [
          {
              "internalType": "address",
              "name": "account",
              "type": "address"
          }
      ],
      "name": "balanceOf",
      "outputs": [
          {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
          }
      ],
      "stateMutability": "view",
      "type": "function"
  },
  {
      "inputs": [
          {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
          }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
  },
  {
      "inputs": [
          {
              "internalType": "address",
              "name": "account",
              "type": "address"
          },
          {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
          }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
  },
  {
      "inputs": [],
      "name": "decimals",
      "outputs": [
          {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
          }
      ],
      "stateMutability": "view",
      "type": "function"
  },
  {
      "inputs": [
          {
              "internalType": "address",
              "name": "spender",
              "type": "address"
          },
          {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
          }
      ],
      "name": "decreaseAllowance",
      "outputs": [
          {
              "internalType": "bool",
              "name": "",
              "type": "bool"
          }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
  },
  {
      "inputs": [
          {
              "internalType": "address",
              "name": "spender",
              "type": "address"
          },
          {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
          }
      ],
      "name": "increaseAllowance",
      "outputs": [
          {
              "internalType": "bool",
              "name": "",
              "type": "bool"
          }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
  },
  {
      "inputs": [],
      "name": "name",
      "outputs": [
          {
              "internalType": "string",
              "name": "",
              "type": "string"
          }
      ],
      "stateMutability": "view",
      "type": "function"
  },
  {
      "inputs": [],
      "name": "symbol",
      "outputs": [
          {
              "internalType": "string",
              "name": "",
              "type": "string"
          }
      ],
      "stateMutability": "view",
      "type": "function"
  },
  {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
          {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
          }
      ],
      "stateMutability": "view",
      "type": "function"
  },
  {
      "inputs": [
          {
              "internalType": "address",
              "name": "to",
              "type": "address"
          },
          {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
          }
      ],
      "name": "transfer",
      "outputs": [
          {
              "internalType": "bool",
              "name": "",
              "type": "bool"
          }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
  },
  {
      "inputs": [
          {
              "internalType": "address",
              "name": "from",
              "type": "address"
          },
          {
              "internalType": "address",
              "name": "to",
              "type": "address"
          },
          {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
          }
      ],
      "name": "transferFrom",
      "outputs": [
          {
              "internalType": "bool",
              "name": "",
              "type": "bool"
          }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
  }
]`

const BYTE_CODE = "60806040523480156200001157600080fd5b506040516200210c3803806200210c8339818101604052810190620000379190620003fd565b828281600390816200004a9190620006d8565b5080600490816200005c9190620006d8565b5050506200009b3362000074620000a460201b60201c565b600a6200008291906200094f565b836200008f9190620009a0565b620000ad60201b60201c565b50505062000ad7565b60006012905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036200011f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001169062000a4c565b60405180910390fd5b62000133600083836200022560201b60201c565b806002600082825462000147919062000a6e565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200019e919062000a6e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162000205919062000aba565b60405180910390a362000221600083836200022a60201b60201c565b5050565b505050565b505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000298826200024d565b810181811067ffffffffffffffff82111715620002ba57620002b96200025e565b5b80604052505050565b6000620002cf6200022f565b9050620002dd82826200028d565b919050565b600067ffffffffffffffff8211156200030057620002ff6200025e565b5b6200030b826200024d565b9050602081019050919050565b60005b83811015620003385780820151818401526020810190506200031b565b60008484015250505050565b60006200035b6200035584620002e2565b620002c3565b9050828152602081018484840111156200037a576200037962000248565b5b6200038784828562000318565b509392505050565b600082601f830112620003a757620003a662000243565b5b8151620003b984826020860162000344565b91505092915050565b6000819050919050565b620003d781620003c2565b8114620003e357600080fd5b50565b600081519050620003f781620003cc565b92915050565b60008060006060848603121562000419576200041862000239565b5b600084015167ffffffffffffffff8111156200043a57620004396200023e565b5b62000448868287016200038f565b935050602084015167ffffffffffffffff8111156200046c576200046b6200023e565b5b6200047a868287016200038f565b92505060406200048d86828701620003e6565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004ea57607f821691505b6020821081036200050057620004ff620004a2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200056a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200052b565b6200057686836200052b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620005b9620005b3620005ad84620003c2565b6200058e565b620003c2565b9050919050565b6000819050919050565b620005d58362000598565b620005ed620005e482620005c0565b84845462000538565b825550505050565b600090565b62000604620005f5565b62000611818484620005ca565b505050565b5b8181101562000639576200062d600082620005fa565b60018101905062000617565b5050565b601f8211156200068857620006528162000506565b6200065d846200051b565b810160208510156200066d578190505b620006856200067c856200051b565b83018262000616565b50505b505050565b600082821c905092915050565b6000620006ad600019846008026200068d565b1980831691505092915050565b6000620006c883836200069a565b9150826002028217905092915050565b620006e38262000497565b67ffffffffffffffff811115620006ff57620006fe6200025e565b5b6200070b8254620004d1565b620007188282856200063d565b600060209050601f8311600181146200075057600084156200073b578287015190505b620007478582620006ba565b865550620007b7565b601f198416620007608662000506565b60005b828110156200078a5784890151825560018201915060208501945060208101905062000763565b86831015620007aa5784890151620007a6601f8916826200069a565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156200084d57808604811115620008255762000824620007bf565b5b6001851615620008355780820291505b80810290506200084585620007ee565b945062000805565b94509492505050565b6000826200086857600190506200093b565b816200087857600090506200093b565b81600181146200089157600281146200089c57620008d2565b60019150506200093b565b60ff841115620008b157620008b0620007bf565b5b8360020a915084821115620008cb57620008ca620007bf565b5b506200093b565b5060208310610133831016604e8410600b84101617156200090c5782820a905083811115620009065762000905620007bf565b5b6200093b565b6200091b8484846001620007fb565b92509050818404811115620009355762000934620007bf565b5b81810290505b9392505050565b600060ff82169050919050565b60006200095c82620003c2565b9150620009698362000942565b9250620009987fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000856565b905092915050565b6000620009ad82620003c2565b9150620009ba83620003c2565b9250828202620009ca81620003c2565b91508282048414831517620009e457620009e3620007bf565b5b5092915050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000a34601f83620009eb565b915062000a4182620009fc565b602082019050919050565b6000602082019050818103600083015262000a678162000a25565b9050919050565b600062000a7b82620003c2565b915062000a8883620003c2565b925082820190508082111562000aa35762000aa2620007bf565b5b92915050565b62000ab481620003c2565b82525050565b600060208201905062000ad1600083018462000aa9565b92915050565b6116258062000ae76000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806342966c681161008c57806395d89b411161006657806395d89b4114610226578063a457c2d714610244578063a9059cbb14610274578063dd62ed3e146102a4576100cf565b806342966c68146101be57806370a08231146101da57806379cc67901461020a576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce56714610170578063395093511461018e575b600080fd5b6100dc6102d4565b6040516100e99190610d7d565b60405180910390f35b61010c60048036038101906101079190610e38565b610366565b6040516101199190610e93565b60405180910390f35b61012a610389565b6040516101379190610ebd565b60405180910390f35b61015a60048036038101906101559190610ed8565b610393565b6040516101679190610e93565b60405180910390f35b6101786103c2565b6040516101859190610f47565b60405180910390f35b6101a860048036038101906101a39190610e38565b6103cb565b6040516101b59190610e93565b60405180910390f35b6101d860048036038101906101d39190610f62565b610402565b005b6101f460048036038101906101ef9190610f8f565b610416565b6040516102019190610ebd565b60405180910390f35b610224600480360381019061021f9190610e38565b61045e565b005b61022e61047e565b60405161023b9190610d7d565b60405180910390f35b61025e60048036038101906102599190610e38565b610510565b60405161026b9190610e93565b60405180910390f35b61028e60048036038101906102899190610e38565b610587565b60405161029b9190610e93565b60405180910390f35b6102be60048036038101906102b99190610fbc565b6105aa565b6040516102cb9190610ebd565b60405180910390f35b6060600380546102e39061102b565b80601f016020809104026020016040519081016040528092919081815260200182805461030f9061102b565b801561035c5780601f106103315761010080835404028352916020019161035c565b820191906000526020600020905b81548152906001019060200180831161033f57829003601f168201915b5050505050905090565b600080610371610631565b905061037e818585610639565b600191505092915050565b6000600254905090565b60008061039e610631565b90506103ab858285610802565b6103b685858561088e565b60019150509392505050565b60006012905090565b6000806103d6610631565b90506103f78185856103e885896105aa565b6103f2919061108b565b610639565b600191505092915050565b61041361040d610631565b82610b0d565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6104708261046a610631565b83610802565b61047a8282610b0d565b5050565b60606004805461048d9061102b565b80601f01602080910402602001604051908101604052809291908181526020018280546104b99061102b565b80156105065780601f106104db57610100808354040283529160200191610506565b820191906000526020600020905b8154815290600101906020018083116104e957829003601f168201915b5050505050905090565b60008061051b610631565b9050600061052982866105aa565b90508381101561056e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056590611131565b60405180910390fd5b61057b8286868403610639565b60019250505092915050565b600080610592610631565b905061059f81858561088e565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069f906111c3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610717576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070e90611255565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107f59190610ebd565b60405180910390a3505050565b600061080e84846105aa565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610888578181101561087a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610871906112c1565b60405180910390fd5b6108878484848403610639565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f490611353565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361096c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610963906113e5565b60405180910390fd5b610977838383610ce3565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156109fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f490611477565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a90919061108b565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610af49190610ebd565b60405180910390a3610b07848484610ce8565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7390611509565b60405180910390fd5b610b8882600083610ce3565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c059061159b565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254610c6591906115bb565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610cca9190610ebd565b60405180910390a3610cde83600084610ce8565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d27578082015181840152602081019050610d0c565b60008484015250505050565b6000601f19601f8301169050919050565b6000610d4f82610ced565b610d598185610cf8565b9350610d69818560208601610d09565b610d7281610d33565b840191505092915050565b60006020820190508181036000830152610d978184610d44565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610dcf82610da4565b9050919050565b610ddf81610dc4565b8114610dea57600080fd5b50565b600081359050610dfc81610dd6565b92915050565b6000819050919050565b610e1581610e02565b8114610e2057600080fd5b50565b600081359050610e3281610e0c565b92915050565b60008060408385031215610e4f57610e4e610d9f565b5b6000610e5d85828601610ded565b9250506020610e6e85828601610e23565b9150509250929050565b60008115159050919050565b610e8d81610e78565b82525050565b6000602082019050610ea86000830184610e84565b92915050565b610eb781610e02565b82525050565b6000602082019050610ed26000830184610eae565b92915050565b600080600060608486031215610ef157610ef0610d9f565b5b6000610eff86828701610ded565b9350506020610f1086828701610ded565b9250506040610f2186828701610e23565b9150509250925092565b600060ff82169050919050565b610f4181610f2b565b82525050565b6000602082019050610f5c6000830184610f38565b92915050565b600060208284031215610f7857610f77610d9f565b5b6000610f8684828501610e23565b91505092915050565b600060208284031215610fa557610fa4610d9f565b5b6000610fb384828501610ded565b91505092915050565b60008060408385031215610fd357610fd2610d9f565b5b6000610fe185828601610ded565b9250506020610ff285828601610ded565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061104357607f821691505b60208210810361105657611055610ffc565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061109682610e02565b91506110a183610e02565b92508282019050808211156110b9576110b861105c565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061111b602583610cf8565b9150611126826110bf565b604082019050919050565b6000602082019050818103600083015261114a8161110e565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006111ad602483610cf8565b91506111b882611151565b604082019050919050565b600060208201905081810360008301526111dc816111a0565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061123f602283610cf8565b915061124a826111e3565b604082019050919050565b6000602082019050818103600083015261126e81611232565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006112ab601d83610cf8565b91506112b682611275565b602082019050919050565b600060208201905081810360008301526112da8161129e565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061133d602583610cf8565b9150611348826112e1565b604082019050919050565b6000602082019050818103600083015261136c81611330565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006113cf602383610cf8565b91506113da82611373565b604082019050919050565b600060208201905081810360008301526113fe816113c2565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611461602683610cf8565b915061146c82611405565b604082019050919050565b6000602082019050818103600083015261149081611454565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006114f3602183610cf8565b91506114fe82611497565b604082019050919050565b60006020820190508181036000830152611522816114e6565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611585602283610cf8565b915061159082611529565b604082019050919050565b600060208201905081810360008301526115b481611578565b9050919050565b60006115c682610e02565b91506115d183610e02565b92508282039050818111156115e9576115e861105c565b5b9291505056fea264697066735822122008d98e7a98d503c3a13a20e13ce9133112d3ee2c5e6373e0cc452b5fcfd47f4364736f6c63430008110033"

const spinnerIcon = <AutoRenewIcon spin color="currentColor" />

const BaseLabel = styled.label`
  color: ${({ theme }) => theme.colors.text};
  display: block;
  font-weight: 600;
  margin-bottom: 8px;
`

export const SecondaryLabel = styled(BaseLabel)`
  font-size: 12px;
  text-transform: uppercase;
`

export const Label = styled(BaseLabel)`
  font-size: 20px;
`

const Layout = styled.div`
  align-items: start;
  display: grid;
  grid-gap: 32px;
  grid-template-columns: minmax(0, 1fr);
  ${({ theme }) => theme.mediaQueries.lg} {
    grid-template-columns: auto;
  }
`
export interface FormState {
  tokenName: string
  tokenSymbol: string
  tokenSupply: number
}

const Home = () => {

  const [state, setState] = useState<FormState>(() => ({
    tokenName: 'Baby Doge',
    tokenSymbol: 'BBD',
    tokenSupply: 10000000
  }))

  const [isLoading, setIsLoading] = useState(false)
  const { t } = useTranslation()
  const { toastSuccess, toastError, toastInfo } = useToast()
  const { tokenName, tokenSymbol, tokenSupply } = state
  const [data, setData] = useState({abi:'[]', bytecode: ''})

  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {
    const { name: inputName, value } = evt.currentTarget
    console.log(inputName, value);
    
    setState((prevState) => ({
      ...prevState,
      [inputName]: value,
    }))
  }

  const {address, isDeploy, deploy } = useDeployContract(ABI, BYTE_CODE, tokenName, tokenSymbol, tokenSupply)

  const compileContract = () => {

    setIsLoading(true)

    const myHeaders = new Headers();
    myHeaders.append("Content-Type", "application/json");

    const raw = JSON.stringify({
      "tokenName": tokenName,
      "tokenSymbol": tokenSymbol,
      "totalSupply": tokenSupply
    });

    const requestOptions : RequestInit = {
      method: 'POST',
      headers: myHeaders,
      body: raw,
      redirect: 'follow'
    };

    fetch("/api/createERC20Contract", requestOptions)
      .then(response => response.json())
      .then(result => {        
        console.log(result["ERC20Tokenabi"]);
        
        setData({abi: result["ERC20Tokenabi"], bytecode: result["ERC20Token"]})
        setIsLoading(false)
        toastSuccess("Success", "Compile contract success")
      })
      .catch(error => {
        setIsLoading(false)
        console.log(error);
        toastError("Error", "Compile contract failed")
      });
  }


  const verifyContract = () => {
    
    var requestOptions : RequestInit = { method: 'GET', redirect: 'follow'};

    fetch("/api/verifyContract?contractAddress=" + address, requestOptions)
      .then(response => response.json())
      .then(result => console.log(result))
      .catch(error => console.log('error', error));
  }

  return (
    <Container py="40px">
      <PageMeta />
      {/* <form> */}
        <Layout>
          <Box>
            <Card>
              <CardHeader>
                <Heading as="h3" scale="md">
                  {t('Create ERC20 token')}
                </Heading>
              </CardHeader>
              <CardBody>
                <Box mb="24px">
                  <SecondaryLabel>{t('Token name')}</SecondaryLabel>
                  <Input id="tokenName" name="tokenName" value={tokenName} scale="lg" onChange={handleChange} required />
                </Box>
                <Box mb="24px">
                  <SecondaryLabel>{t('Token Symbol')}</SecondaryLabel>
                  <Input id="tokenSymbol" name="tokenSymbol" value={tokenSymbol} scale="lg" onChange={handleChange} required />
                </Box>
                <Box mb="24px">
                  <SecondaryLabel>{t('Total supply')}</SecondaryLabel>
                  <Input id="tokenSupply" name="tokenSupply" value={tokenSupply} scale="lg" onChange={handleChange} required />
                </Box>
                <Box mb="24px">
                  <SecondaryLabel>{t('ERC20 token review')}</SecondaryLabel>
                  <SecondaryLabel>{tokenName + ' (' + tokenSymbol + '): ' + tokenSupply.toLocaleString()}</SecondaryLabel>
                  {
                    address && <Link href={'https://testnet.bscscan.com/address/' + address}>
                    Contract address
                  </Link>
                  }
                </Box>
                <Box mb="24px">
                  {/* <Button  
                    onClick={compileContract}
                    endIcon={isLoading ? spinnerIcon : undefined}
                    isLoading={isLoading}
                  >Compile smart contract</Button> */}
                  {
                    data.bytecode.length > 10 || BYTE_CODE.length > 10 && 
                      <Button 
                      onClick={deploy}
                      endIcon={isDeploy ? spinnerIcon : undefined}
                      isLoading={isDeploy}>Create token</Button>
                  
                  }
                  {/* {
                    address && <Button onClick={verifyContract}>Verify contract</Button>
                  } */}
                </Box>
                </CardBody>
            </Card>
          </Box>
          
        </Layout>
      {/* </form> */}
    </Container>
  )
}

export default Home